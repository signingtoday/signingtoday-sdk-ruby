=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SigningTodayAPIClient::Bit4idPathgroupDigitalSignatureTransactionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'Bit4idPathgroupDigitalSignatureTransactionsApi' do
  before do
    # run before each test
    @api_instance = SigningTodayAPIClient::Bit4idPathgroupDigitalSignatureTransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of Bit4idPathgroupDigitalSignatureTransactionsApi' do
    it 'should create an instance of Bit4idPathgroupDigitalSignatureTransactionsApi' do
      expect(@api_instance).to be_instance_of(SigningTodayAPIClient::Bit4idPathgroupDigitalSignatureTransactionsApi)
    end
  end

  # unit tests for d_s_ts_get
  # Retrieve DSTs
  # This API allows to list the DSTs of an organization.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :template Select templates or instances
  # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
  # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
  # @option opts [Integer] :skip An offset into the collection of results
  # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
  # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
  # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
  # @return [DSTsGetResponse]
  describe 'd_s_ts_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_s_ts_post
  # Create a new DST
  # This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
  # @param digital_signature_transaction DST to append to the current resources.
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_s_ts_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_audit_get
  # Retrieve the audit records associated to the DST
  # This API allows to retrieves the audit records associated to the DST.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [Array<AuditRecord>]
  describe 'd_st_id_audit_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_delete
  # Delete a DST
  # This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'd_st_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_fill_patch
  # Fill a form of a DST
  # This API allows to fill a form of a DST.
  # @param id The value of _the unique id_
  # @param fillable_form The form filled by the user.
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_fill_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_get
  # Retrieve a DST
  # This API allows to retrieve a DST.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_instantiate_post
  # Instantiate a DST from a template
  # This API allows to instantiate a DST from a template by specifying the template Id.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_instantiate_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_modify_post
  # Modify a published DST template
  # This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_modify_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_notify_post
  # Send notifications for a DST
  # This API allows to send notifications to pending users for an active _DST_.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'd_st_id_notify_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_publish_post
  # Publish a DST
  # This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_publish_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_put
  # Update a DST
  # This API allows to update a DST.
  # @param id The value of _the unique id_
  # @param digital_signature_transaction DST replacing current object.
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_replace_post
  # Replace a rejected DST
  # This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_replace_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_sign_doc_id_sign_id_get
  # Return the address for signing
  # This API returns the address to perform the signature.
  # @param id The value of _the unique id_
  # @param doc_id Reference to _docId_ has to be signed
  # @param sign_id Reference to the signature request id
  # @param [Hash] opts the optional parameters
  # @return [DSTSigningAddressResponse]
  describe 'd_st_id_sign_doc_id_sign_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_st_id_templatize_post
  # Create a template from a DST
  # This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
  # @param id The value of _the unique id_
  # @param [Hash] opts the optional parameters
  # @return [DigitalSignatureTransaction]
  describe 'd_st_id_templatize_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
