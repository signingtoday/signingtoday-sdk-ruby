=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class DevicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clear a trusted device
    # This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
    # @param device_id [String] The _deviceId_ to deregister
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @return [nil]
    def device_authorization_delete(device_id, opts = {})
      device_authorization_delete_with_http_info(device_id, opts)
      nil
    end

    # Clear a trusted device
    # This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
    # @param device_id [String] The _deviceId_ to deregister
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def device_authorization_delete_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevicesApi.device_authorization_delete ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DevicesApi.device_authorization_delete"
      end
      # resource path
      local_var_path = '/device/authorization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'deviceId'] = device_id
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#device_authorization_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a challenge for authorizing a new trusted device
    # This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
    # @param [Hash] opts the optional parameters
    # @return [DeviceAuthorizationResponse]
    def device_authorization_get(opts = {})
      data, _status_code, _headers = device_authorization_get_with_http_info(opts)
      data
    end

    # Retrieve a challenge for authorizing a new trusted device
    # This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceAuthorizationResponse, Integer, Hash)>] DeviceAuthorizationResponse data, response status code and response headers
    def device_authorization_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevicesApi.device_authorization_get ...'
      end
      # resource path
      local_var_path = '/device/authorization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'image/png', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeviceAuthorizationResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#device_authorization_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a new trusted device
    # This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
    # @param inline_object7 [InlineObject7] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def device_authorization_post(inline_object7, opts = {})
      data, _status_code, _headers = device_authorization_post_with_http_info(inline_object7, opts)
      data
    end

    # Register a new trusted device
    # This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
    # @param inline_object7 [InlineObject7] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def device_authorization_post_with_http_info(inline_object7, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevicesApi.device_authorization_post ...'
      end
      # verify the required parameter 'inline_object7' is set
      if @api_client.config.client_side_validation && inline_object7.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object7' when calling DevicesApi.device_authorization_post"
      end
      # resource path
      local_var_path = '/device/authorization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object7) 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#device_authorization_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of trusted devices
    # The API allows to enumerate all the devices of a user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @return [TrustedDevicesGetResponse]
    def devices_get(opts = {})
      data, _status_code, _headers = devices_get_with_http_info(opts)
      data
    end

    # Get the list of trusted devices
    # The API allows to enumerate all the devices of a user. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @return [Array<(TrustedDevicesGetResponse, Integer, Hash)>] TrustedDevicesGetResponse data, response status code and response headers
    def devices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DevicesApi.devices_get ...'
      end
      # resource path
      local_var_path = '/devices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TrustedDevicesGetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
