=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module SigningTodayAPIClient
  # The **Digital Signature Transaction** is the core object at the center of every `digital signature workflow` in Signing Today. It is a `collection` element and holds every document (to be signed or just attached to the transaction) as well as the signature plan required to fulfill the transaction; how many signatures are required, are there any forms to be filled, appearance, signature sequence, signers... everything starts here. 
  class DigitalSignatureTransaction
    # The uuid code that identifies the Digital Signature Transaction
    attr_accessor :id

    # The _domain_ is the Organization which a user or a DST belongs
    attr_accessor :domain

    # Title of the Digital Signature Transaction
    attr_accessor :title

    # The _DST_ which this one replaces
    attr_accessor :replaces

    # The _DST_ which has replaces the current one
    attr_accessor :replaced_by

    # The user created the Digital Signature Transaction
    attr_accessor :created_by_user

    # Date of creation of the Digital Signature Transaction
    attr_accessor :created_at

    # The _documents_ field is an array containing document objects, where everyone of them is defined as follows 
    attr_accessor :documents

    # The _date-time_ the DST has been published
    attr_accessor :published_at

    # Indicates when the DST will expire
    attr_accessor :expires_at

    # An array of resources attached to the _DST_, each one defined as follows
    attr_accessor :resources

    # An array of signatures, each one defined as follows
    attr_accessor :signatures

    # Status of the _Digital Signature Transaction_
    attr_accessor :status

    # The explication of the occurred error
    attr_accessor :error_message

    # Indicates when the _DST_ has been deleted
    attr_accessor :deleted_at

    # An array of tags for the _DST_. In such way is possible to tag in the same way some _DSTs_ in order to keep them organized and been easy to find them through the custom search
    attr_accessor :tags

    # Indicates if a template has been used to create the DST or not
    attr_accessor :template

    # Indicates if a public template has been used to create the DST or not
    attr_accessor :public_template

    # Extra information about the _DST_
    attr_accessor :extra_data

    # UUIDs of the users to which the DST is visible
    attr_accessor :visible_to

    # Name of groups that are informed about the DST
    attr_accessor :cc_groups

    # UUIDs of the users that are informed about the DST
    attr_accessor :cc_users

    # True if the DST is flagged as urgent
    attr_accessor :urgent

    # Indicates the last update of the DST, such as the performing of a signature
    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'domain' => :'domain',
        :'title' => :'title',
        :'replaces' => :'replaces',
        :'replaced_by' => :'replacedBy',
        :'created_by_user' => :'createdByUser',
        :'created_at' => :'createdAt',
        :'documents' => :'documents',
        :'published_at' => :'publishedAt',
        :'expires_at' => :'expiresAt',
        :'resources' => :'resources',
        :'signatures' => :'signatures',
        :'status' => :'status',
        :'error_message' => :'errorMessage',
        :'deleted_at' => :'deletedAt',
        :'tags' => :'tags',
        :'template' => :'template',
        :'public_template' => :'publicTemplate',
        :'extra_data' => :'extraData',
        :'visible_to' => :'visibleTo',
        :'cc_groups' => :'ccGroups',
        :'cc_users' => :'ccUsers',
        :'urgent' => :'urgent',
        :'updated_at' => :'updatedAt'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'domain' => :'String',
        :'title' => :'String',
        :'replaces' => :'String',
        :'replaced_by' => :'String',
        :'created_by_user' => :'String',
        :'created_at' => :'DateTime',
        :'documents' => :'Array<Document>',
        :'published_at' => :'DateTime',
        :'expires_at' => :'DateTime',
        :'resources' => :'Array<LFResource>',
        :'signatures' => :'Array<Signature>',
        :'status' => :'String',
        :'error_message' => :'String',
        :'deleted_at' => :'DateTime',
        :'tags' => :'Array<String>',
        :'template' => :'Boolean',
        :'public_template' => :'Boolean',
        :'extra_data' => :'Hash<String, Object>',
        :'visible_to' => :'Array<String>',
        :'cc_groups' => :'Array<String>',
        :'cc_users' => :'Array<String>',
        :'urgent' => :'Boolean',
        :'updated_at' => :'DateTime'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SigningTodayAPIClient::DigitalSignatureTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SigningTodayAPIClient::DigitalSignatureTransaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'replaces')
        self.replaces = attributes[:'replaces']
      end

      if attributes.key?(:'replaced_by')
        self.replaced_by = attributes[:'replaced_by']
      end

      if attributes.key?(:'created_by_user')
        self.created_by_user = attributes[:'created_by_user']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'documents')
        if (value = attributes[:'documents']).is_a?(Array)
          self.documents = value
        end
      end

      if attributes.key?(:'published_at')
        self.published_at = attributes[:'published_at']
      end

      if attributes.key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      end

      if attributes.key?(:'resources')
        if (value = attributes[:'resources']).is_a?(Array)
          self.resources = value
        end
      end

      if attributes.key?(:'signatures')
        if (value = attributes[:'signatures']).is_a?(Array)
          self.signatures = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'deleted_at')
        self.deleted_at = attributes[:'deleted_at']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.key?(:'public_template')
        self.public_template = attributes[:'public_template']
      end

      if attributes.key?(:'extra_data')
        if (value = attributes[:'extra_data']).is_a?(Hash)
          self.extra_data = value
        end
      end

      if attributes.key?(:'visible_to')
        if (value = attributes[:'visible_to']).is_a?(Array)
          self.visible_to = value
        end
      end

      if attributes.key?(:'cc_groups')
        if (value = attributes[:'cc_groups']).is_a?(Array)
          self.cc_groups = value
        end
      end

      if attributes.key?(:'cc_users')
        if (value = attributes[:'cc_users']).is_a?(Array)
          self.cc_users = value
        end
      end

      if attributes.key?(:'urgent')
        self.urgent = attributes[:'urgent']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["draft", "downloadingInDraft", "downloadingInPublished", "published", "toFill", "toSign", "expired", "signed", "rejected", "error"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["draft", "downloadingInDraft", "downloadingInPublished", "published", "toFill", "toSign", "expired", "signed", "rejected", "error"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          domain == o.domain &&
          title == o.title &&
          replaces == o.replaces &&
          replaced_by == o.replaced_by &&
          created_by_user == o.created_by_user &&
          created_at == o.created_at &&
          documents == o.documents &&
          published_at == o.published_at &&
          expires_at == o.expires_at &&
          resources == o.resources &&
          signatures == o.signatures &&
          status == o.status &&
          error_message == o.error_message &&
          deleted_at == o.deleted_at &&
          tags == o.tags &&
          template == o.template &&
          public_template == o.public_template &&
          extra_data == o.extra_data &&
          visible_to == o.visible_to &&
          cc_groups == o.cc_groups &&
          cc_users == o.cc_users &&
          urgent == o.urgent &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, domain, title, replaces, replaced_by, created_by_user, created_at, documents, published_at, expires_at, resources, signatures, status, error_message, deleted_at, tags, template, public_template, extra_data, visible_to, cc_groups, cc_users, urgent, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SigningTodayAPIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
