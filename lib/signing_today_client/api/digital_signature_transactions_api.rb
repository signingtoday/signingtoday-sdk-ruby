=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class DigitalSignatureTransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve DSTs
    # This API allows to list the DSTs of an organization.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :template Select templates or instances (default to false)
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [DSTsGetResponse]
    def d_s_ts_get(opts = {})
      data, _status_code, _headers = d_s_ts_get_with_http_info(opts)
      data
    end

    # Retrieve DSTs
    # This API allows to list the DSTs of an organization.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :template Select templates or instances
    # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [Array<(DSTsGetResponse, Integer, Hash)>] DSTsGetResponse data, response status code and response headers
    def d_s_ts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_s_ts_get ...'
      end
      # resource path
      local_var_path = '/DSTs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'template'] = opts[:'template'] if !opts[:'template'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DSTsGetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_s_ts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new DST
    # This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  ``` {   status: \"draft\",   publishedAt: null,   tags: [],   urgent: false,   template: false } ```  To add documents use the Resources Patch endpoint `/DST/{id}/resources`.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
    # @param digital_signature_transaction [DigitalSignatureTransaction] DST to append to the current resources.
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_s_ts_post(digital_signature_transaction, opts = {})
      data, _status_code, _headers = d_s_ts_post_with_http_info(digital_signature_transaction, opts)
      data
    end

    # Create a new DST
    # This API allows to creates a new DST. A DST is created in the Draft state and then updated using PUT. Example of creation request:  &#x60;&#x60;&#x60; {   status: \&quot;draft\&quot;,   publishedAt: null,   tags: [],   urgent: false,   template: false } &#x60;&#x60;&#x60;  To add documents use the Resources Patch endpoint &#x60;/DST/{id}/resources&#x60;.  If the *template* flag is set true the DST is a Template. If the *publicTemplate* flag is set true the Template is visible to all users with rights to create a DST.  A DST is made made available to users using *publish* end point. A template generates a DST with the *instantiate* endpoint. 
    # @param digital_signature_transaction [DigitalSignatureTransaction] DST to append to the current resources.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_s_ts_post_with_http_info(digital_signature_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_s_ts_post ...'
      end
      # verify the required parameter 'digital_signature_transaction' is set
      if @api_client.config.client_side_validation && digital_signature_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'digital_signature_transaction' when calling DigitalSignatureTransactionsApi.d_s_ts_post"
      end
      # resource path
      local_var_path = '/DSTs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(digital_signature_transaction) 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_s_ts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the audit records associated to the DST
    # This API allows to retrieves the audit records associated to the DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<AuditRecord>]
    def d_st_id_audit_get(id, opts = {})
      data, _status_code, _headers = d_st_id_audit_get_with_http_info(id, opts)
      data
    end

    # Retrieve the audit records associated to the DST
    # This API allows to retrieves the audit records associated to the DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AuditRecord>, Integer, Hash)>] Array<AuditRecord> data, response status code and response headers
    def d_st_id_audit_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_audit_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_audit_get"
      end
      # resource path
      local_var_path = '/DST/{id}/audit'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AuditRecord>' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_audit_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a DST
    # This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_st_id_delete(id, opts = {})
      d_st_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a DST
    # This API allows to delete a DST. Actually the DST is marked as deleted thus not displayed anymore into the organization, but it will still be present in the database.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def d_st_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_delete"
      end
      # resource path
      local_var_path = '/DST/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fill a form of a DST
    # This API allows to fill a form of a DST.
    # @param id [String] The value of _the unique id_
    # @param fillable_form [FillableForm] The form filled by the user.
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_fill_patch(id, fillable_form, opts = {})
      data, _status_code, _headers = d_st_id_fill_patch_with_http_info(id, fillable_form, opts)
      data
    end

    # Fill a form of a DST
    # This API allows to fill a form of a DST.
    # @param id [String] The value of _the unique id_
    # @param fillable_form [FillableForm] The form filled by the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_fill_patch_with_http_info(id, fillable_form, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_fill_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_fill_patch"
      end
      # verify the required parameter 'fillable_form' is set
      if @api_client.config.client_side_validation && fillable_form.nil?
        fail ArgumentError, "Missing the required parameter 'fillable_form' when calling DigitalSignatureTransactionsApi.d_st_id_fill_patch"
      end
      # resource path
      local_var_path = '/DST/{id}/fill'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(fillable_form) 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_fill_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a DST
    # This API allows to retrieve a DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_get(id, opts = {})
      data, _status_code, _headers = d_st_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a DST
    # This API allows to retrieve a DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_get"
      end
      # resource path
      local_var_path = '/DST/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Instantiate a DST from a template
    # This API allows to instantiate a DST from a template by specifying the template Id.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_instantiate_post(id, opts = {})
      data, _status_code, _headers = d_st_id_instantiate_post_with_http_info(id, opts)
      data
    end

    # Instantiate a DST from a template
    # This API allows to instantiate a DST from a template by specifying the template Id.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_instantiate_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_instantiate_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_instantiate_post"
      end
      # resource path
      local_var_path = '/DST/{id}/instantiate'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_instantiate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify a published DST template
    # This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_modify_post(id, opts = {})
      data, _status_code, _headers = d_st_id_modify_post_with_http_info(id, opts)
      data
    end

    # Modify a published DST template
    # This API allows to move a published DST to DRAFT, allowing the modification. This way is possible to modify a _DST Template_. 
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_modify_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_modify_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_modify_post"
      end
      # resource path
      local_var_path = '/DST/{id}/modify'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_modify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send notifications for a DST
    # This API allows to send notifications to pending users for an active _DST_.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_st_id_notify_post(id, opts = {})
      d_st_id_notify_post_with_http_info(id, opts)
      nil
    end

    # Send notifications for a DST
    # This API allows to send notifications to pending users for an active _DST_.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def d_st_id_notify_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_notify_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_notify_post"
      end
      # resource path
      local_var_path = '/DST/{id}/notify'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_notify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish a DST
    # This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_publish_post(id, opts = {})
      data, _status_code, _headers = d_st_id_publish_post_with_http_info(id, opts)
      data
    end

    # Publish a DST
    # This API allows to publish a DST, the new state becomes published. It will automatically evolve to a new state where it will be filled or signed.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_publish_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_publish_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_publish_post"
      end
      # resource path
      local_var_path = '/DST/{id}/publish'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_publish_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a DST
    # This API allows to update a DST.
    # @param id [String] The value of _the unique id_
    # @param digital_signature_transaction [DigitalSignatureTransaction] DST replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_put(id, digital_signature_transaction, opts = {})
      data, _status_code, _headers = d_st_id_put_with_http_info(id, digital_signature_transaction, opts)
      data
    end

    # Update a DST
    # This API allows to update a DST.
    # @param id [String] The value of _the unique id_
    # @param digital_signature_transaction [DigitalSignatureTransaction] DST replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_put_with_http_info(id, digital_signature_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_put"
      end
      # verify the required parameter 'digital_signature_transaction' is set
      if @api_client.config.client_side_validation && digital_signature_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'digital_signature_transaction' when calling DigitalSignatureTransactionsApi.d_st_id_put"
      end
      # resource path
      local_var_path = '/DST/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(digital_signature_transaction) 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a rejected DST
    # This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_replace_post(id, opts = {})
      data, _status_code, _headers = d_st_id_replace_post_with_http_info(id, opts)
      data
    end

    # Replace a rejected DST
    # This API allows to replace a rejected DST instantiating a new one. The replacing DST is created in DRAFT state.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_replace_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_replace_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_replace_post"
      end
      # resource path
      local_var_path = '/DST/{id}/replace'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_replace_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the address for signing
    # This API returns the address to perform the signature.
    # @param id [String] The value of _the unique id_
    # @param doc_id [Integer] Reference to _docId_ has to be signed
    # @param sign_id [Integer] Reference to the signature request id
    # @param [Hash] opts the optional parameters
    # @return [DSTSigningAddressResponse]
    def d_st_id_sign_doc_id_sign_id_get(id, doc_id, sign_id, opts = {})
      data, _status_code, _headers = d_st_id_sign_doc_id_sign_id_get_with_http_info(id, doc_id, sign_id, opts)
      data
    end

    # Return the address for signing
    # This API returns the address to perform the signature.
    # @param id [String] The value of _the unique id_
    # @param doc_id [Integer] Reference to _docId_ has to be signed
    # @param sign_id [Integer] Reference to the signature request id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DSTSigningAddressResponse, Integer, Hash)>] DSTSigningAddressResponse data, response status code and response headers
    def d_st_id_sign_doc_id_sign_id_get_with_http_info(id, doc_id, sign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_sign_doc_id_sign_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_sign_doc_id_sign_id_get"
      end
      # verify the required parameter 'doc_id' is set
      if @api_client.config.client_side_validation && doc_id.nil?
        fail ArgumentError, "Missing the required parameter 'doc_id' when calling DigitalSignatureTransactionsApi.d_st_id_sign_doc_id_sign_id_get"
      end
      # verify the required parameter 'sign_id' is set
      if @api_client.config.client_side_validation && sign_id.nil?
        fail ArgumentError, "Missing the required parameter 'sign_id' when calling DigitalSignatureTransactionsApi.d_st_id_sign_doc_id_sign_id_get"
      end
      # resource path
      local_var_path = '/DST/{id}/sign/{docId}/{signId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'docId' + '}', CGI.escape(doc_id.to_s)).sub('{' + 'signId' + '}', CGI.escape(sign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DSTSigningAddressResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_sign_doc_id_sign_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a template from a DST
    # This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_id_templatize_post(id, opts = {})
      data, _status_code, _headers = d_st_id_templatize_post_with_http_info(id, opts)
      data
    end

    # Create a template from a DST
    # This API allows to creates a new template starting from a DST. Currently implemented only for published DST templates.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_templatize_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DigitalSignatureTransactionsApi.d_st_id_templatize_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DigitalSignatureTransactionsApi.d_st_id_templatize_post"
      end
      # resource path
      local_var_path = '/DST/{id}/templatize'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DigitalSignatureTransactionsApi#d_st_id_templatize_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
