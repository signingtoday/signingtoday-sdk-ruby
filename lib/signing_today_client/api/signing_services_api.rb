=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class SigningServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # sign-service open post
    # description bla bla
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def sign_service_open(opts = {})
      data, _status_code, _headers = sign_service_open_with_http_info(opts)
      data
    end

    # sign-service open post
    # description bla bla
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def sign_service_open_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SigningServicesApi.sign_service_open ...'
      end
      # resource path
      local_var_path = '/sign-service/open'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SigningServicesApi#sign_service_open\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sign-service-open-transaction-id post
    # @param transaction_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def sign_service_open_id(transaction_id, opts = {})
      data, _status_code, _headers = sign_service_open_id_with_http_info(transaction_id, opts)
      data
    end

    # sign-service-open-transaction-id post
    # @param transaction_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def sign_service_open_id_with_http_info(transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SigningServicesApi.sign_service_open_id ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling SigningServicesApi.sign_service_open_id"
      end
      # resource path
      local_var_path = '/sign-service/open/{transaction-id}'.sub('{' + 'transaction-id' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SigningServicesApi#sign_service_open_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sign-service-signature-id-perform-identity-id post
    # @param signature_id [String] 
    # @param identity_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject8] :inline_object8 
    # @return [Object]
    def signature_id_perform_id_post(signature_id, identity_id, opts = {})
      data, _status_code, _headers = signature_id_perform_id_post_with_http_info(signature_id, identity_id, opts)
      data
    end

    # sign-service-signature-id-perform-identity-id post
    # @param signature_id [String] 
    # @param identity_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject8] :inline_object8 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def signature_id_perform_id_post_with_http_info(signature_id, identity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SigningServicesApi.signature_id_perform_id_post ...'
      end
      # verify the required parameter 'signature_id' is set
      if @api_client.config.client_side_validation && signature_id.nil?
        fail ArgumentError, "Missing the required parameter 'signature_id' when calling SigningServicesApi.signature_id_perform_id_post"
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling SigningServicesApi.signature_id_perform_id_post"
      end
      # resource path
      local_var_path = '/sign-service/{signature-id}/perform/{identity-id}'.sub('{' + 'signature-id' + '}', CGI.escape(signature_id.to_s)).sub('{' + 'identity-id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object8']) 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SigningServicesApi#signature_id_perform_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
