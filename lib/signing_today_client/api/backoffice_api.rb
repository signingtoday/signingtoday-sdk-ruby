=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class BackofficeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sync all completed DSTs on Alfresco
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [AlfrescoSync]
    def organization_id_alfresco_sync_get(id, opts = {})
      data, _status_code, _headers = organization_id_alfresco_sync_get_with_http_info(id, opts)
      data
    end

    # Sync all completed DSTs on Alfresco
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AlfrescoSync, Integer, Hash)>] AlfrescoSync data, response status code and response headers
    def organization_id_alfresco_sync_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_alfresco_sync_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_alfresco_sync_get"
      end
      # resource path
      local_var_path = '/organization/{id}/alfrescoSync'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AlfrescoSync' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_alfresco_sync_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync all completed DSTs on Alfresco
    # @param id [String] The value of the unique id
    # @param alfresco_sync [AlfrescoSync] Domain associated to the account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organization_id_alfresco_sync_post(id, alfresco_sync, opts = {})
      organization_id_alfresco_sync_post_with_http_info(id, alfresco_sync, opts)
      nil
    end

    # Sync all completed DSTs on Alfresco
    # @param id [String] The value of the unique id
    # @param alfresco_sync [AlfrescoSync] Domain associated to the account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organization_id_alfresco_sync_post_with_http_info(id, alfresco_sync, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_alfresco_sync_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_alfresco_sync_post"
      end
      # verify the required parameter 'alfresco_sync' is set
      if @api_client.config.client_side_validation && alfresco_sync.nil?
        fail ArgumentError, "Missing the required parameter 'alfresco_sync' when calling BackofficeApi.organization_id_alfresco_sync_post"
      end
      # resource path
      local_var_path = '/organization/{id}/alfrescoSync'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(alfresco_sync) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_alfresco_sync_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable an Organization account.
    # Enable or disable an Organization.
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled New status to set (default to false)
    # @return [nil]
    def organization_id_delete(id, opts = {})
      organization_id_delete_with_http_info(id, opts)
      nil
    end

    # Enable or disable an Organization account.
    # Enable or disable an Organization.
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled New status to set
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organization_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_delete"
      end
      # resource path
      local_var_path = '/organization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve info on one organization
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [Organization]
    def organization_id_get(id, opts = {})
      data, _status_code, _headers = organization_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve info on one organization
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def organization_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_get"
      end
      # resource path
      local_var_path = '/organization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Organization' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve public resources
    # @param res [String] resource id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id organization id
    # @return [File]
    def organization_id_public_get(res, opts = {})
      data, _status_code, _headers = organization_id_public_get_with_http_info(res, opts)
      data
    end

    # Retrieve public resources
    # @param res [String] resource id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id organization id
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def organization_id_public_get_with_http_info(res, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_public_get ...'
      end
      # verify the required parameter 'res' is set
      if @api_client.config.client_side_validation && res.nil?
        fail ArgumentError, "Missing the required parameter 'res' when calling BackofficeApi.organization_id_public_get"
      end
      # verify enum value
      allowable_values = ["logo"]
      if @api_client.config.client_side_validation && !allowable_values.include?(res)
        fail ArgumentError, "invalid value for \"res\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/organization/public'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'res'] = res
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_public_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update info on one organization
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @option opts [Organization] :organization 
    # @return [nil]
    def organization_id_put(id, opts = {})
      organization_id_put_with_http_info(id, opts)
      nil
    end

    # Update info on one organization
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @option opts [Organization] :organization 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organization_id_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_put"
      end
      # resource path
      local_var_path = '/organization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'organization']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization resource
    # Get an organization resource
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def organization_id_resource_get(id, res_path, opts = {})
      data, _status_code, _headers = organization_id_resource_get_with_http_info(id, res_path, opts)
      data
    end

    # Get an organization resource
    # Get an organization resource
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def organization_id_resource_get_with_http_info(id, res_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_resource_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_resource_get"
      end
      # verify the required parameter 'res_path' is set
      if @api_client.config.client_side_validation && res_path.nil?
        fail ArgumentError, "Missing the required parameter 'res_path' when calling BackofficeApi.organization_id_resource_get"
      end
      # resource path
      local_var_path = '/organization/{id}/resource'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'resPath'] = res_path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_resource_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or overwrite an organization resource
    # Create or overwrite an organization resource
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organization_id_resource_put(id, res_path, file, opts = {})
      organization_id_resource_put_with_http_info(id, res_path, file, opts)
      nil
    end

    # Create or overwrite an organization resource
    # Create or overwrite an organization resource
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param file [File] The file to upload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organization_id_resource_put_with_http_info(id, res_path, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_id_resource_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_id_resource_put"
      end
      # verify the required parameter 'res_path' is set
      if @api_client.config.client_side_validation && res_path.nil?
        fail ArgumentError, "Missing the required parameter 'res_path' when calling BackofficeApi.organization_id_resource_put"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling BackofficeApi.organization_id_resource_put"
      end
      # resource path
      local_var_path = '/organization/{id}/resource'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'resPath'] = res_path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_id_resource_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization resource
    # Deletes a Resource.
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def organization_resource_id_delete(id, res_path, opts = {})
      organization_resource_id_delete_with_http_info(id, res_path, opts)
      nil
    end

    # Delete an organization resource
    # Deletes a Resource.
    # @param id [String] The value of the unique id
    # @param res_path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organization_resource_id_delete_with_http_info(id, res_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_resource_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_resource_id_delete"
      end
      # verify the required parameter 'res_path' is set
      if @api_client.config.client_side_validation && res_path.nil?
        fail ArgumentError, "Missing the required parameter 'res_path' when calling BackofficeApi.organization_resource_id_delete"
      end
      # resource path
      local_var_path = '/organization/{id}/resource'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'resPath'] = res_path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_resource_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all the organization resources
    # List all the organization resources.
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def organization_resources_get(id, opts = {})
      data, _status_code, _headers = organization_resources_get_with_http_info(id, opts)
      data
    end

    # List all the organization resources
    # List all the organization resources.
    # @param id [String] The value of the unique id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def organization_resources_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_resources_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BackofficeApi.organization_resources_get"
      end
      # resource path
      local_var_path = '/organization/{id}/resources'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_resources_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve organization tags
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def organization_tags_get(opts = {})
      data, _status_code, _headers = organization_tags_get_with_http_info(opts)
      data
    end

    # Retrieve organization tags
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def organization_tags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organization_tags_get ...'
      end
      # resource path
      local_var_path = '/organization/tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organization_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of organizations
    # Get the list of organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [OrganizationsGetResponse]
    def organizations_get(opts = {})
      data, _status_code, _headers = organizations_get_with_http_info(opts)
      data
    end

    # Get the list of organizations
    # Get the list of organizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [Array<(OrganizationsGetResponse, Integer, Hash)>] OrganizationsGetResponse data, response status code and response headers
    def organizations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organizations_get ...'
      end
      # resource path
      local_var_path = '/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OrganizationsGetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new organization
    # @param [Hash] opts the optional parameters
    # @option opts [Organization] :organization 
    # @return [nil]
    def organizations_post(opts = {})
      organizations_post_with_http_info(opts)
      nil
    end

    # Create a new organization
    # @param [Hash] opts the optional parameters
    # @option opts [Organization] :organization 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def organizations_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BackofficeApi.organizations_post ...'
      end
      # resource path
      local_var_path = '/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'organization']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BackofficeApi#organizations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
