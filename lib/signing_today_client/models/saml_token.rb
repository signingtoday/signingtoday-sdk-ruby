=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module SigningTodayAPIClient
  class SAMLToken
    attr_accessor :_not_onorafter

    attr_accessor :surname

    attr_accessor :given_name

    attr_accessor :common_name

    attr_accessor :rfc822_mailbox

    attr_accessor :_not_before

    attr_accessor :userid

    attr_accessor :mail_alternate_address

    attr_accessor :edu_person_org_dn

    attr_accessor :edu_person_principal_name

    attr_accessor :is_member_of

    attr_accessor :groups

    attr_accessor :display_name

    attr_accessor :edu_person_targeted_id

    attr_accessor :_cookies

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_not_onorafter' => :'_not_onorafter',
        :'surname' => :'surname',
        :'given_name' => :'givenName',
        :'common_name' => :'commonName',
        :'rfc822_mailbox' => :'rfc822Mailbox',
        :'_not_before' => :'_not_before',
        :'userid' => :'userid',
        :'mail_alternate_address' => :'mailAlternateAddress',
        :'edu_person_org_dn' => :'eduPersonOrgDN',
        :'edu_person_principal_name' => :'eduPersonPrincipalName',
        :'is_member_of' => :'isMemberOf',
        :'groups' => :'groups',
        :'display_name' => :'displayName',
        :'edu_person_targeted_id' => :'eduPersonTargetedID',
        :'_cookies' => :'_cookies'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_not_onorafter' => :'DateTime',
        :'surname' => :'String',
        :'given_name' => :'String',
        :'common_name' => :'String',
        :'rfc822_mailbox' => :'String',
        :'_not_before' => :'DateTime',
        :'userid' => :'String',
        :'mail_alternate_address' => :'String',
        :'edu_person_org_dn' => :'String',
        :'edu_person_principal_name' => :'String',
        :'is_member_of' => :'Array<String>',
        :'groups' => :'Array<String>',
        :'display_name' => :'String',
        :'edu_person_targeted_id' => :'SAMLTokenEduPersonTargetedID',
        :'_cookies' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SigningTodayAPIClient::SAMLToken` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SigningTodayAPIClient::SAMLToken`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_not_onorafter')
        self._not_onorafter = attributes[:'_not_onorafter']
      end

      if attributes.key?(:'surname')
        self.surname = attributes[:'surname']
      end

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'common_name')
        self.common_name = attributes[:'common_name']
      end

      if attributes.key?(:'rfc822_mailbox')
        self.rfc822_mailbox = attributes[:'rfc822_mailbox']
      end

      if attributes.key?(:'_not_before')
        self._not_before = attributes[:'_not_before']
      end

      if attributes.key?(:'userid')
        self.userid = attributes[:'userid']
      end

      if attributes.key?(:'mail_alternate_address')
        self.mail_alternate_address = attributes[:'mail_alternate_address']
      end

      if attributes.key?(:'edu_person_org_dn')
        self.edu_person_org_dn = attributes[:'edu_person_org_dn']
      end

      if attributes.key?(:'edu_person_principal_name')
        self.edu_person_principal_name = attributes[:'edu_person_principal_name']
      end

      if attributes.key?(:'is_member_of')
        if (value = attributes[:'is_member_of']).is_a?(Array)
          self.is_member_of = value
        end
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'edu_person_targeted_id')
        self.edu_person_targeted_id = attributes[:'edu_person_targeted_id']
      end

      if attributes.key?(:'_cookies')
        self._cookies = attributes[:'_cookies']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _not_onorafter == o._not_onorafter &&
          surname == o.surname &&
          given_name == o.given_name &&
          common_name == o.common_name &&
          rfc822_mailbox == o.rfc822_mailbox &&
          _not_before == o._not_before &&
          userid == o.userid &&
          mail_alternate_address == o.mail_alternate_address &&
          edu_person_org_dn == o.edu_person_org_dn &&
          edu_person_principal_name == o.edu_person_principal_name &&
          is_member_of == o.is_member_of &&
          groups == o.groups &&
          display_name == o.display_name &&
          edu_person_targeted_id == o.edu_person_targeted_id &&
          _cookies == o._cookies
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_not_onorafter, surname, given_name, common_name, rfc822_mailbox, _not_before, userid, mail_alternate_address, edu_person_org_dn, edu_person_principal_name, is_member_of, groups, display_name, edu_person_targeted_id, _cookies].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SigningTodayAPIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
