=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SigningTodayAPIClient::DevicesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DevicesApi' do
  before do
    # run before each test
    @api_instance = SigningTodayAPIClient::DevicesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DevicesApi' do
    it 'should create an instance of DevicesApi' do
      expect(@api_instance).to be_instance_of(SigningTodayAPIClient::DevicesApi)
    end
  end

  # unit tests for device_authorization_delete
  # Clear a trusted device
  # This APIs allows to deregister a _deviceId_ of a trusted device.  It also deletes any notification push-token associated to the trusted device. 
  # @param device_id The _deviceId_ to deregister
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
  # @return [nil]
  describe 'device_authorization_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for device_authorization_get
  # Retrieve a challenge for authorizing a new trusted device
  # This API allows to retrieve a challenge in order to authorize a new trusted device.   - If asked in image/png the challenge is given encoded as a QR-Code image.   - An invocation of the endpoint invalidate any previous challenge.   - The challenge lasts 10 minutes. 
  # @param [Hash] opts the optional parameters
  # @return [DeviceAuthorizationResponse]
  describe 'device_authorization_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for device_authorization_post
  # Register a new trusted device
  # This API allows to register a new trusted device. If the device is already present, it returns the current associated Token and updates the name. 
  # @param inline_object7 
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'device_authorization_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for devices_get
  # Get the list of trusted devices
  # The API allows to enumerate all the devices of a user. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user_id Select the objects relative to the user specified by the parameter. If not specified will be used the id of the current authenticated user
  # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
  # @option opts [Integer] :skip An offset into the collection of results
  # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
  # @return [TrustedDevicesGetResponse]
  describe 'devices_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
