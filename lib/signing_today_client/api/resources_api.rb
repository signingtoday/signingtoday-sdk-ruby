=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class ResourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve all resources associated to a DST
    # This API allows to retrieve all resources associated to a DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [File]
    def d_st_id_resources_get(id, opts = {})
      data, _status_code, _headers = d_st_id_resources_get_with_http_info(id, opts)
      data
    end

    # Retrieve all resources associated to a DST
    # This API allows to retrieve all resources associated to a DST.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def d_st_id_resources_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.d_st_id_resources_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.d_st_id_resources_get"
      end
      # resource path
      local_var_path = '/DST/{id}/resources'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#d_st_id_resources_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Append a new resource to a DST
    # This API allows to append a new Resource to a DST.
    # @param id [String] The value of _the unique id_
    # @param file [File] The file to upload
    # @param filename [String] The name of the file
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title User-defined title of the resource.
    # @return [DigitalSignatureTransaction]
    def d_st_id_resources_patch(id, file, filename, resource_type, opts = {})
      data, _status_code, _headers = d_st_id_resources_patch_with_http_info(id, file, filename, resource_type, opts)
      data
    end

    # Append a new resource to a DST
    # This API allows to append a new Resource to a DST.
    # @param id [String] The value of _the unique id_
    # @param file [File] The file to upload
    # @param filename [String] The name of the file
    # @param resource_type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title User-defined title of the resource.
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_id_resources_patch_with_http_info(id, file, filename, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.d_st_id_resources_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.d_st_id_resources_patch"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ResourcesApi.d_st_id_resources_patch"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling ResourcesApi.d_st_id_resources_patch"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ResourcesApi.d_st_id_resources_patch"
      end
      # verify enum value
      allowable_values = ["PDF_Document"]
      if @api_client.config.client_side_validation && !allowable_values.include?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/DST/{id}/resources'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['filename'] = filename
      form_params['resourceType'] = resource_type
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#d_st_id_resources_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Resource
    # This API allows to delete a Resource.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def d_st_resource_id_delete(id, opts = {})
      data, _status_code, _headers = d_st_resource_id_delete_with_http_info(id, opts)
      data
    end

    # Delete a Resource
    # This API allows to delete a Resource.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def d_st_resource_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.d_st_resource_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.d_st_resource_id_delete"
      end
      # resource path
      local_var_path = '/DST/resource/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#d_st_resource_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Resource
    # This API allows to retrieve a Resource.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [File]
    def resource_id_get(id, opts = {})
      data, _status_code, _headers = resource_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Resource
    # This API allows to retrieve a Resource.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def resource_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.resource_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.resource_id_get"
      end
      # resource path
      local_var_path = '/resource/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#resource_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Resource
    # This API allows to update a Resource.
    # @param id [String] The value of _the unique id_
    # @param lf_resource [LFResource] Resource replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resource_id_put(id, lf_resource, opts = {})
      resource_id_put_with_http_info(id, lf_resource, opts)
      nil
    end

    # Update a Resource
    # This API allows to update a Resource.
    # @param id [String] The value of _the unique id_
    # @param lf_resource [LFResource] Resource replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def resource_id_put_with_http_info(id, lf_resource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.resource_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.resource_id_put"
      end
      # verify the required parameter 'lf_resource' is set
      if @api_client.config.client_side_validation && lf_resource.nil?
        fail ArgumentError, "Missing the required parameter 'lf_resource' when calling ResourcesApi.resource_id_put"
      end
      # resource path
      local_var_path = '/resource/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(lf_resource) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#resource_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user appearance resource.
    # This API allows to delete an identity appearance resource.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_id_identity_identity_id_appearance_delete(id, identity_id, opts = {})
      user_id_identity_identity_id_appearance_delete_with_http_info(id, identity_id, opts)
      nil
    end

    # Delete a user appearance resource.
    # This API allows to delete an identity appearance resource.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_id_identity_identity_id_appearance_delete_with_http_info(id, identity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.user_id_identity_identity_id_appearance_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.user_id_identity_identity_id_appearance_delete"
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling ResourcesApi.user_id_identity_identity_id_appearance_delete"
      end
      # resource path
      local_var_path = '/user/{id}/identity/{identity-id}/appearance'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'identity-id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#user_id_identity_identity_id_appearance_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download an identity appearance resource
    # This API allows to get the identity appearance resource.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param [Hash] opts the optional parameters
    # @return [File]
    def user_id_identity_identity_id_appearance_get(id, identity_id, opts = {})
      data, _status_code, _headers = user_id_identity_identity_id_appearance_get_with_http_info(id, identity_id, opts)
      data
    end

    # Download an identity appearance resource
    # This API allows to get the identity appearance resource.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def user_id_identity_identity_id_appearance_get_with_http_info(id, identity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.user_id_identity_identity_id_appearance_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.user_id_identity_identity_id_appearance_get"
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling ResourcesApi.user_id_identity_identity_id_appearance_get"
      end
      # resource path
      local_var_path = '/user/{id}/identity/{identity-id}/appearance'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'identity-id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#user_id_identity_identity_id_appearance_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a graphical appearance to a user's identity
    # This API allows to add a graphical appearance to the identity of a user.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param file [File] The path of the file to upload
    # @param filename [String] The name of the file
    # @param resource_type [String] The type of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title User-defined title of the resource
    # @return [LFResource]
    def user_id_identity_identity_id_appearance_post(id, identity_id, file, filename, resource_type, opts = {})
      data, _status_code, _headers = user_id_identity_identity_id_appearance_post_with_http_info(id, identity_id, file, filename, resource_type, opts)
      data
    end

    # Add a graphical appearance to a user&#39;s identity
    # This API allows to add a graphical appearance to the identity of a user.
    # @param id [String] The value of _the unique id_
    # @param identity_id [String] The unique id of the _Identity_
    # @param file [File] The path of the file to upload
    # @param filename [String] The name of the file
    # @param resource_type [String] The type of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title User-defined title of the resource
    # @return [Array<(LFResource, Integer, Hash)>] LFResource data, response status code and response headers
    def user_id_identity_identity_id_appearance_post_with_http_info(id, identity_id, file, filename, resource_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourcesApi.user_id_identity_identity_id_appearance_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ResourcesApi.user_id_identity_identity_id_appearance_post"
      end
      # verify the required parameter 'identity_id' is set
      if @api_client.config.client_side_validation && identity_id.nil?
        fail ArgumentError, "Missing the required parameter 'identity_id' when calling ResourcesApi.user_id_identity_identity_id_appearance_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ResourcesApi.user_id_identity_identity_id_appearance_post"
      end
      # verify the required parameter 'filename' is set
      if @api_client.config.client_side_validation && filename.nil?
        fail ArgumentError, "Missing the required parameter 'filename' when calling ResourcesApi.user_id_identity_identity_id_appearance_post"
      end
      # verify the required parameter 'resource_type' is set
      if @api_client.config.client_side_validation && resource_type.nil?
        fail ArgumentError, "Missing the required parameter 'resource_type' when calling ResourcesApi.user_id_identity_identity_id_appearance_post"
      end
      # verify enum value
      allowable_values = ["PDF_Document", "Image"]
      if @api_client.config.client_side_validation && !allowable_values.include?(resource_type)
        fail ArgumentError, "invalid value for \"resource_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/{id}/identity/{identity-id}/appearance'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'identity-id' + '}', CGI.escape(identity_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['filename'] = filename
      form_params['resourceType'] = resource_type
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LFResource' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourcesApi#user_id_identity_identity_id_appearance_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
