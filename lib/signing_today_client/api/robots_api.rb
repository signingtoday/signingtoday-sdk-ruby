=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class RobotsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Clear a Robot authentication lifetime token
    # This API allows to clear the Robot authentication lifetime token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [nil]
    def robot_authentication_delete(opts = {})
      robot_authentication_delete_with_http_info(opts)
      nil
    end

    # Clear a Robot authentication lifetime token
    # This API allows to clear the Robot authentication lifetime token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def robot_authentication_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RobotsApi.robot_authentication_delete ...'
      end
      # resource path
      local_var_path = '/robot/authentication'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RobotsApi#robot_authentication_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Robot authentication lifetime token
    # This API allows to generate or retrieves the Robot authentication lifetime token for the specified robot account, or the current logged in account. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [RobotAuthenticationToken]
    def robot_authentication_get(opts = {})
      data, _status_code, _headers = robot_authentication_get_with_http_info(opts)
      data
    end

    # Retrieve the Robot authentication lifetime token
    # This API allows to generate or retrieves the Robot authentication lifetime token for the specified robot account, or the current logged in account. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [Array<(RobotAuthenticationToken, Integer, Hash)>] RobotAuthenticationToken data, response status code and response headers
    def robot_authentication_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RobotsApi.robot_authentication_get ...'
      end
      # resource path
      local_var_path = '/robot/authentication'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RobotAuthenticationToken' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RobotsApi#robot_authentication_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Robot configuration
    # This API allows to retrieve the Robot configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [RobotConfiguration]
    def robot_configuration_get(opts = {})
      data, _status_code, _headers = robot_configuration_get_with_http_info(opts)
      data
    end

    # Retrieve the Robot configuration
    # This API allows to retrieve the Robot configuration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username The _username_ associated to the account
    # @option opts [String] :domain The _domain_ associated to the account
    # @return [Array<(RobotConfiguration, Integer, Hash)>] RobotConfiguration data, response status code and response headers
    def robot_configuration_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RobotsApi.robot_configuration_get ...'
      end
      # resource path
      local_var_path = '/robot/configuration'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RobotConfiguration' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RobotsApi#robot_configuration_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new DST in one call
    # This API allows to create a new DST with a more convenient interface for client applications. The purpose is to provide a method for the creation of a DST in order to semplify the integration into third part applications. 
    # @param create_digital_signature_transaction [CreateDigitalSignatureTransaction] description
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def robot_ds_ts_post(create_digital_signature_transaction, opts = {})
      data, _status_code, _headers = robot_ds_ts_post_with_http_info(create_digital_signature_transaction, opts)
      data
    end

    # Create a new DST in one call
    # This API allows to create a new DST with a more convenient interface for client applications. The purpose is to provide a method for the creation of a DST in order to semplify the integration into third part applications. 
    # @param create_digital_signature_transaction [CreateDigitalSignatureTransaction] description
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def robot_ds_ts_post_with_http_info(create_digital_signature_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RobotsApi.robot_ds_ts_post ...'
      end
      # verify the required parameter 'create_digital_signature_transaction' is set
      if @api_client.config.client_side_validation && create_digital_signature_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'create_digital_signature_transaction' when calling RobotsApi.robot_ds_ts_post"
      end
      # resource path
      local_var_path = '/robot/DSTs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_digital_signature_transaction) 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RobotsApi#robot_ds_ts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Instantiate a DST from a template by robot
    # This API allows to instantiate a DST from a template patching parts of its data structure. 
    # @param id [String] The value of _the unique id_
    # @param instantiate_dst_template [InstantiateDSTTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [DigitalSignatureTransaction]
    def robot_id_instantiate_post(id, instantiate_dst_template, opts = {})
      data, _status_code, _headers = robot_id_instantiate_post_with_http_info(id, instantiate_dst_template, opts)
      data
    end

    # Instantiate a DST from a template by robot
    # This API allows to instantiate a DST from a template patching parts of its data structure. 
    # @param id [String] The value of _the unique id_
    # @param instantiate_dst_template [InstantiateDSTTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DigitalSignatureTransaction, Integer, Hash)>] DigitalSignatureTransaction data, response status code and response headers
    def robot_id_instantiate_post_with_http_info(id, instantiate_dst_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RobotsApi.robot_id_instantiate_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RobotsApi.robot_id_instantiate_post"
      end
      # verify the required parameter 'instantiate_dst_template' is set
      if @api_client.config.client_side_validation && instantiate_dst_template.nil?
        fail ArgumentError, "Missing the required parameter 'instantiate_dst_template' when calling RobotsApi.robot_id_instantiate_post"
      end
      # resource path
      local_var_path = '/robot/{id}/instantiate'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(instantiate_dst_template) 

      # return_type
      return_type = opts[:return_type] || 'DigitalSignatureTransaction' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RobotsApi#robot_id_instantiate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
