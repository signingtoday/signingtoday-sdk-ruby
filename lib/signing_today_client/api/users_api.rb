=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module SigningTodayAPIClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Enable or disable a User
    # This API allows to **enable** or **disable** a User account. 
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled This is a _boolean_ parameter. If true the User is **enabled**  (default to false)
    # @return [nil]
    def user_id_delete(id, opts = {})
      user_id_delete_with_http_info(id, opts)
      nil
    end

    # Enable or disable a User
    # This API allows to **enable** or **disable** a User account. 
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled This is a _boolean_ parameter. If true the User is **enabled** 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.user_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.user_id_delete"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#user_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a User
    # This API allows to retrieve a User.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [User]
    def user_id_get(id, opts = {})
      data, _status_code, _headers = user_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a User
    # This API allows to retrieve a User.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.user_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.user_id_get"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'User' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#user_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User identities
    # This API allows to retrieve user identities.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<Identity>]
    def user_id_identities_get(id, opts = {})
      data, _status_code, _headers = user_id_identities_get_with_http_info(id, opts)
      data
    end

    # Retrieve User identities
    # This API allows to retrieve user identities.
    # @param id [String] The value of _the unique id_
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Identity>, Integer, Hash)>] Array<Identity> data, response status code and response headers
    def user_id_identities_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.user_id_identities_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.user_id_identities_get"
      end
      # resource path
      local_var_path = '/user/{id}/identities'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Identity>' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#user_id_identities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a User
    # This API allows to update a User.
    # @param id [String] The value of _the unique id_
    # @param user [User] User replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_id_put(id, user, opts = {})
      user_id_put_with_http_info(id, user, opts)
      nil
    end

    # Update a User
    # This API allows to update a User.
    # @param id [String] The value of _the unique id_
    # @param user [User] User replacing current object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_id_put_with_http_info(id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.user_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.user_id_put"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.user_id_put"
      end
      # resource path
      local_var_path = '/user/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#user_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change the User role
    # This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
    # @param id [String] The value of _the unique id_
    # @param new_role [String] The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_id_role_put(id, new_role, opts = {})
      user_id_role_put_with_http_info(id, new_role, opts)
      nil
    end

    # Change the User role
    # This API allows to change the permissions associated to the users, (**capabilities**) according to predefined user roles. 
    # @param id [String] The value of _the unique id_
    # @param new_role [String] The new **role** of the User. Allowed values are **admin**, **instructor**, **signer** 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_id_role_put_with_http_info(id, new_role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.user_id_role_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.user_id_role_put"
      end
      # verify the required parameter 'new_role' is set
      if @api_client.config.client_side_validation && new_role.nil?
        fail ArgumentError, "Missing the required parameter 'new_role' when calling UsersApi.user_id_role_put"
      end
      # verify enum value
      allowable_values = ["admin", "instructor", "signer"]
      if @api_client.config.client_side_validation && !allowable_values.include?(new_role)
        fail ArgumentError, "invalid value for \"new_role\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/{id}/role'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'newRole'] = new_role

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#user_id_role_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Users
    # This allows to get the list of the Users of an Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [UsersGetResponse]
    def users_get(opts = {})
      data, _status_code, _headers = users_get_with_http_info(opts)
      data
    end

    # Retrieve Users
    # This allows to get the list of the Users of an Organization.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [Array<(UsersGetResponse, Integer, Hash)>] UsersGetResponse data, response status code and response headers
    def users_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_get ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UsersGetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve UserGroups
    # This API allows to get the list of the UserGroups.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [UserGroupGetResponse]
    def users_groups_get(opts = {})
      data, _status_code, _headers = users_groups_get_with_http_info(opts)
      data
    end

    # Retrieve UserGroups
    # This API allows to get the list of the UserGroups.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
    # @option opts [Integer] :skip An offset into the collection of results
    # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
    # @option opts [String] :order_by An ordering definition (eg. $orderBy&#x3D;updatedAt,desc)
    # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
    # @return [Array<(UserGroupGetResponse, Integer, Hash)>] UserGroupGetResponse data, response status code and response headers
    def users_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_groups_get ...'
      end
      # resource path
      local_var_path = '/users/groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'$orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', '*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UserGroupGetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new UserGroups
    # This API allows to create a new UserGroups.
    # @param user_group [Array<UserGroup>] UserGroup list to be added.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def users_groups_post(user_group, opts = {})
      users_groups_post_with_http_info(user_group, opts)
      nil
    end

    # Create a new UserGroups
    # This API allows to create a new UserGroups.
    # @param user_group [Array<UserGroup>] UserGroup list to be added.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def users_groups_post_with_http_info(user_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_groups_post ...'
      end
      # verify the required parameter 'user_group' is set
      if @api_client.config.client_side_validation && user_group.nil?
        fail ArgumentError, "Missing the required parameter 'user_group' when calling UsersApi.users_groups_post"
      end
      # resource path
      local_var_path = '/users/groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user_group) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new User
    # This API allows to create a new User.
    # @param create_user_request [CreateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def users_post(create_user_request, opts = {})
      data, _status_code, _headers = users_post_with_http_info(create_user_request, opts)
      data
    end

    # Create a new User
    # This API allows to create a new User.
    # @param create_user_request [CreateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def users_post_with_http_info(create_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_post ...'
      end
      # verify the required parameter 'create_user_request' is set
      if @api_client.config.client_side_validation && create_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_user_request' when calling UsersApi.users_post"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_user_request) 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
