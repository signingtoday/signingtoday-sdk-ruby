=begin
#Signing Today Web

#*Signing Today* is the perfect Digital Signature Gateway. Whenever in Your workflow You need to add one or more Digital Signatures to Your document, *Signing Today* is the right choice. You prepare Your documents, *Signing Today* takes care of all the rest: send invitations (`signature tickets`) to signers, collects their signatures, send You back the signed document. Integrating *Signing Today* in Your existing applications is very easy. Just follow these API specifications and get inspired by the many examples presented hereafter. 

The version of the OpenAPI document: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for SigningTodayAPIClient::BackofficeApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BackofficeApi' do
  before do
    # run before each test
    @api_instance = SigningTodayAPIClient::BackofficeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BackofficeApi' do
    it 'should create an instance of BackofficeApi' do
      expect(@api_instance).to be_instance_of(SigningTodayAPIClient::BackofficeApi)
    end
  end

  # unit tests for organization_id_alfresco_sync_get
  # Sync all completed DSTs on Alfresco
  # @param id The value of the unique id
  # @param [Hash] opts the optional parameters
  # @return [AlfrescoSync]
  describe 'organization_id_alfresco_sync_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_alfresco_sync_post
  # Sync all completed DSTs on Alfresco
  # @param id The value of the unique id
  # @param alfresco_sync Domain associated to the account.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organization_id_alfresco_sync_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_delete
  # Enable or disable an Organization account.
  # Enable or disable an Organization.
  # @param id The value of the unique id
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :enabled New status to set
  # @return [nil]
  describe 'organization_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_get
  # Retrieve info on one organization
  # @param id The value of the unique id
  # @param [Hash] opts the optional parameters
  # @return [Organization]
  describe 'organization_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_public_get
  # Retrieve public resources
  # @param res resource id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id organization id
  # @return [File]
  describe 'organization_id_public_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_put
  # Update info on one organization
  # @param id The value of the unique id
  # @param [Hash] opts the optional parameters
  # @option opts [Organization] :organization 
  # @return [nil]
  describe 'organization_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_resource_get
  # Get an organization resource
  # Get an organization resource
  # @param id The value of the unique id
  # @param res_path 
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'organization_id_resource_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_id_resource_put
  # Create or overwrite an organization resource
  # Create or overwrite an organization resource
  # @param id The value of the unique id
  # @param res_path 
  # @param file The file to upload.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organization_id_resource_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_resource_id_delete
  # Delete an organization resource
  # Deletes a Resource.
  # @param id The value of the unique id
  # @param res_path 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'organization_resource_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_resources_get
  # List all the organization resources
  # List all the organization resources.
  # @param id The value of the unique id
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'organization_resources_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organization_tags_get
  # Retrieve organization tags
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'organization_tags_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_get
  # Get the list of organizations
  # Get the list of organizations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :top A number of results to return. Applied after **$skip** 
  # @option opts [Integer] :skip An offset into the collection of results
  # @option opts [Boolean] :count If true, the server includes the count of all the items in the response 
  # @option opts [String] :filter A filter definition (eg. $filter&#x3D;name &#x3D;&#x3D; \&quot;Milk\&quot; or surname &#x3D;&#x3D; \&quot;Bread\&quot;)
  # @return [OrganizationsGetResponse]
  describe 'organizations_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for organizations_post
  # Create a new organization
  # @param [Hash] opts the optional parameters
  # @option opts [Organization] :organization 
  # @return [nil]
  describe 'organizations_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
